apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  annotations:
    kapp.k14s.io/change-rule: "upsert after upserting tekton.dev/pipelines"
  name: ci-stage1
  namespace: tekton-pipelines
spec:
  inputs:
    params:
      - name: event
        type: string
      - name: eventType
        type: string
      - name: repoName
        type: string
        description: Repository name
      - name: repoBranch
        type: string
        description: Repository branch
  steps:
    - name: create-pipeline-ns
      image: nixery.dev/shell/kubectl/yq/jq
      command: ["bash"]
      args:
        - "-ec"
        - |
          export RUN_ID=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 5 | head -n1)
          export NAMESPACE=pipeline-$(inputs.params.repoName)-$(inputs.params.repoBranch)
          echo "# Creating namespace $NAMESPACE"
          kubectl create namespace $NAMESPACE || true
          if [ "$(inputs.params.eventType)" == "pull_request" ]; then
            echo "# Creating rolebinding edit for $NAMESPACE"
            kubectl create rolebinding pr-tekton-pipeline \
              --clusterrole=edit \
              --group=system:serviceaccounts:$NAMESPACE \
              --namespace=$NAMESPACE || true
          else
            echo "# Creating clusterrolebinding edit for $NAMESPACE"
            kubectl create clusterrolebinding tekton-pipeline \
              --clusterrole=edit \
              --group=system:serviceaccounts:$NAMESPACE \
              --namespace=$NAMESPACE || true
          fi
          echo "# Fetching secrets from secrets-$(inputs.params.repoName) namespace"
          kubectl get -o json secrets -n secrets-$(inputs.params.repoName) | jq -s '.[].items | map(select(.kind == "Secret") | {"\(.metadata.name)": .data}) | add | {secrets: .}' > secrets.json
          echo '$(inputs.params.event)' > event.json
          cat event.json secrets.json | jq -s 'add | {global: {ci: .}} * {global: {ci: {namespace: env.NAMESPACE, uid: env.RUN_ID}}}' > trigger.json
          echo "# Trigger user pipeline with event: "
          cat trigger.json
    - name: trigger-pipeline
      image: nixery.dev/curl
      command: ["curl"]
      args:
        - -v
        - -H
        - "Content-Type: application/json"
        - -d
        - "@trigger.json"
        - http://el-internal-tekton-ci:8080
---
apiVersion: tekton.dev/v1alpha1
kind: ClusterTask
metadata:
  annotations:
    kapp.k14s.io/change-rule: "upsert after upserting tekton.dev/pipelines"
  name: ci-stage2
  namespace: tekton-pipelines
spec:
  inputs:
    params:
      - name: event
        type: string
      - name: uid
        type: string
      - name: namespace
        type: string
    resources:
      - name: project-repo
        type: git
  steps:
    - name: template-user-pipeline
      image: nixery.dev/shell/yq/coreutils/kubernetes-helm/kubectl
      command: ["bash"]
      workingDir: /workspace/project-repo/.tekton
      args:
        - "-ec"
        - |
          echo '$(inputs.params.event)' | yq -y . > ci-values.yaml
          echo "# CI template values:"
          cat ci-values.yaml
          echo "# Rendered template:"
          helm template . --values=ci-values.yaml > rendered.yaml
          cat rendered.yaml
          echo "# Create configmap ci-context-$(inputs.params.uid)"
          kubectl create configmap ci-context-$(inputs.params.uid) --from-file=ci-values.yaml
    - name: deploy-user-pipeline
      image: eonpatapon/kapp
      command: ["kapp"]
      workingDir: /workspace/project-repo/.tekton
      args:
        - deploy
        - -n
        - $(inputs.params.namespace)
        - -a
        - pipeline
        - --into-ns
        - $(inputs.params.namespace)
        - -f
        - rendered.yaml
        - -y
