apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  annotations:
    kapp.k14s.io/change-rule: "upsert after upserting tekton.dev/pipelines"
  name: ci-apply-user-pipeline
  namespace: tekton-pipelines
spec:
  inputs:
    params:
      - name: repoName
        type: string
        description: Repository name
      - name: repoBranch
        type: string
        description: Repository branch
    resources:
      - name: project-repo
        type: git
  steps:
    - name: template-user-pipeline
      image: nixery.dev/shell/jq/yq/coreutils/kubernetes-helm/kubectl
      command: ["bash"]
      workingDir: /workspace/project-repo/.tekton
      args:
        - "-ec"
        - |
          export RUN_ID=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 5 | head -n1)
          export NAMESPACE=$(inputs.params.repoName)-$(inputs.params.repoBranch)
          cat <<EOF > values-global.yaml
          global:
            ci:
              namespace: $(inputs.params.repoName)-$(inputs.params.repoBranch)
              repository:
                name: $(inputs.params.repoName)
                revision: $(inputs.resources.project-repo.revision)
                url: $(inputs.resources.project-repo.url)
              uid: ${RUN_ID}
          EOF
          echo "# CI template values:"
          cat values-global.yaml
          echo "# Fetching secrets secrets-$(inputs.params.repoName) namespace"
          kubectl get -o yaml secrets -n secrets-$(inputs.params.repoName)  | yq -s -y '.[].items | map(select(.kind=="Secret") | {"\(.metadata.name)": .data}) | add | {global: {ci: {secrets: .}}}' > values-secrets-global.yaml
          cat values-secrets-global.yaml
          echo "# Rendering template"
          helm template . --values=values-global.yaml --values=values-secrets-global.yaml > rendered.yaml
          cat rendered.yaml
          kubectl create namespace $NAMESPACE || true
          kubectl create rolebinding serviceaccounts-edit \
            --clusterrole=edit \
            --group=system:serviceaccounts:$NAMESPACE \
            --namespace=$NAMESPACE || true
    - name: deploy-user-pipeline
      image: eonpatapon/kapp
      command: ["kapp"]
      workingDir: /workspace/project-repo/.tekton
      args:
        - deploy
        - -a
        - $(inputs.params.repoName)-$(inputs.params.repoBranch)
        - --into-ns
        - $(inputs.params.repoName)-$(inputs.params.repoBranch)
        - -f
        - rendered.yaml
        - -y
---
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: ci-pipeline
  namespace: tekton-pipelines
spec:
  params:
    - name: repoName
      type: string
      description: Repository name
    - name: repoBranch
      type: string
      description: Repository branch
  resources:
    - name: project-repo
      type: git
  tasks:
    - name: ci-apply-user-pipeline
      taskRef:
        name: ci-apply-user-pipeline
      params:
        - name: repoName
          value: $(params.repoName)
        - name: repoBranch
          value: $(params.repoBranch)
      resources:
        inputs:
          - name: project-repo
            resource: project-repo
