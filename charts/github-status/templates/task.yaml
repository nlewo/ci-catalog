apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  namespace: {{ .Values.global.ci.namespace }}
  name: github-status
  annotations:
    kapp.k14s.io/change-group: "ci/resources"
spec:
  steps:
    - name: status-updater
      image: nixery.dev/shell/kubectl/yq/curl/cacert
      command: ["bash"]
      args:
        - "-c"
        - |
          set -e
          echo "Set status to 'pending'"
          echo '{"state": "pending","target_url": "{{ .Values.global.ci.dahboardUrl }}","description": "A pipeline started!","context": "continuous-integration/tekton"}' > status.json
          curl -s --cacert /etc/ssl/certs/ca-bundle.crt -X POST -H "Authorization: token $(cat /var/secret/token)" -H 'Content-Type: application/json' https://api.github.com/repos/{{ .Values.global.ci.repository.fullname }}/statuses/{{ .Values.global.ci.repository.revision }} -d @status.json

          echo "Waiting for the pipeline {{ .Values.pipelinerun }} termination (in the namespace {{ .Values.global.ci.namespace }})"
          while kubectl get -n {{ .Values.global.ci.namespace }} pipelineruns.tekton.dev {{ .Values.pipelinerun }} -o yaml | yq -e '.status.conditions[].status == "Unknown"'
          do
            sleep 1
          done

          REASON=$(kubectl get -n {{ .Values.global.ci.namespace }} pipelineruns.tekton.dev {{ .Values.pipelinerun }} -o yaml | yq -r '.status.conditions[].reason')
          if [ $REASON == "Succeeded" ]
          then
            echo '{"state": "success","target_url": "{{ .Values.global.ci.dashboardUrl }}","description": "A pipeline succeeded!","context": "continuous-integration/tekton"}' > status.json
          else
            # TODO: add a message
            echo '{"state": "failure","target_url": "{{ .Values.global.ci.dashboardUrl }}","description": "A pipeline failed with reason: ' $REASON '","context": "continuous-integration/tekton"}' > status.json
          fi
          echo "Set status to:"
          cat status.json
          curl -s --cacert /etc/ssl/certs/ca-bundle.crt -X POST -H "Authorization: token $(cat /var/secret/token)" -H 'Content-Type: application/json' https://api.github.com/repos/{{ .Values.global.ci.repository.fullname }}/statuses/{{ .Values.global.ci.repository.revision }} -d @status.json            
      volumeMounts:
        - name: github-token
          mountPath: /var/secret
  volumes:
    - name: github-token
      secret:
        secretName: {{ .Values.githubTokenSecretName }}
